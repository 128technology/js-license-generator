#!/usr/bin/env node

const fs = require('fs');
const minimist = require('minimist');
const _ = require('lodash');
const chalk = require('chalk');
const semver = require('semver');

const argv = minimist(process.argv);
const { XLSXBuilder } = require('../lib/builders');

if (argv.help) {
  console.log('Usage:');
  console.log('license-json-consolidate [arguments]');
  console.log();
  console.log('Arguments:');
  console.log('--name=<string>           The name of the output file (default is "output.csv".)');
  console.log(
    '--cacheFile=<path>      An absolute path to a text based license file, typically one generated by the license generator.'
  );
  console.log('--help                   This help.');
  process.exit(0);
}

const { name, cacheFile } = argv;

let dictionary = {};

const licenses = JSON.parse(fs.readFileSync(cacheFile, 'utf-8'));
const builder = new XLSXBuilder();

const outputName = name ? name : 'output';

_.forEach(licenses, (pkg, pkgName) => {
  const versionText = _.omit(pkg, ['repository', 'types']);
  const versions = _.keys(versionText);
  const version = _.reduce(versions, (result, value) => {
    if (semver.gt(result, value)) {
      return result;
    }
    return value;
  });
  const text = pkg[version];
  let types = pkg.types ? pkg.types : '';
  types = Array.isArray(types) ? types.join(',') : types;

  builder.addCached(pkgName, version, text, types);
});

builder.write(outputName);
console.log(chalk.green(`Wrote file: ${outputName}.csv`));
