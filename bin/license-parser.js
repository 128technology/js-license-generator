#!/usr/bin/env node

const fs = require('fs');
const minimist = require('minimist');

const START = '=====================================================';
const argv = minimist(process.argv);

if (argv.help) {
  console.log('Usage:');
  console.log('license-parser [arguments]');
  console.log();
  console.log('Arguments:');
  console.log(
    '--licenseFile=<path>     An absolute path to a text based license file, typically one generated by the license generator.'
  );
  console.log('--help                   This help.');
  process.exit(0);
}

const { licenseFile } = argv;

class LicenseDictionary {
  constructor() {
    this.dict = {};
  }

  addLicense(pkgName, pkgVersion, text) {
    if (!this.dict[pkgName]) {
      this.dict[pkgName] = {};
    }

    this.dict[pkgName][pkgVersion] = text;
  }

  getLicenses() {
    return this.dict;
  }
}

const licensesText = fs.readFileSync(licenseFile, 'utf-8');
const lines = licensesText.match(/[^\r\n]+/g);
const licenses = new LicenseDictionary();

let inLic = false;
let numStartSeen = 0;
let acc = [];
let name = null;
let version = null;

lines.forEach((line, i) => {
  if (line === START) {
    if (!inLic) {
      inLic = true;
    } else if (inLic && numStartSeen === 0) {
      numStartSeen += 1;

      const pkgId = acc[acc.length - 1];
      const splitIndex = pkgId.lastIndexOf('@');
      name = pkgId.slice(0, splitIndex);
      version = pkgId.slice(splitIndex + 1);
    }
  }

  acc.push(line);

  if (i + 1 === lines.length || (inLic && numStartSeen > 0 && lines[i + 1] === START)) {
    const text = acc.slice(3).join('\n');
    licenses.addLicense(name, version, text);

    inLic = false;
    numStartSeen = 0;
    name = null;
    version = null;
    acc = [];
  }
});

fs.writeFileSync('licenses.json', JSON.stringify(licenses.getLicenses()), 'utf-8');
