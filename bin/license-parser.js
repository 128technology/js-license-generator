#!/usr/bin/env node

const fs = require("fs");
const minimist = require("minimist");
const chalk = require("chalk");
const _ = require("lodash");
const path = require('path');

const START = "=====================================================";
const argv = minimist(process.argv);

if (argv.help) {
  console.log("Usage:");
  console.log("license-parser [arguments]");
  console.log();
  console.log("Arguments:");
  console.log(
    "--licenseFile=<path>           An absolute path to a text based license file, typically one generated by the license generator."
  );
  console.log(
    "--licenseDirectory=<path>      An absolute path to a text based license files, typically one generated by the license generator."
  );
  console.log(
    "--ignore=<name1, name2>        Comma separated files to ignore (when licenseDirectory supplied)."
  );
  console.log("--help               This help.");
  process.exit(0);
}

const { licenseFile, licenseDirectory, ignore } = argv;
const ignoreList = ignore ? ignore.split(",") : [];
const outputName = "licenses.json";

class LicenseDictionary {
  constructor() {
    this.dict = {};
  }

  addLicense(pkgName, pkgVersion, text) {
    if (!this.dict[pkgName]) {
      this.dict[pkgName] = {};
    }

    this.dict[pkgName][pkgVersion] = text;
  }

  getLicenses() {
    return this.dict;
  }
}

const licenses = new LicenseDictionary();

if (licenseDirectory) {
  const results = fs.readdirSync(licenseDirectory);
  results.forEach(filName => {
    singleFile(path.resolve(licenseDirectory, filName));
  });
} else {
  singleFile(licenseFile);
}

fs.writeFileSync(outputName, JSON.stringify(licenses.getLicenses()), "utf-8");

console.log(chalk.green(`Wrote file: ${outputName}.json`));

function singleFile(licenseFile) {
  let filName = _.last(licenseFile.split("/"));
  if (licenseDirectory && ignoreList.includes(filName)) {
    console.log(`Ignoring file ${filName} from ignore args`);
    return;
  }
  try {
    if (fs.lstatSync(licenseFile).isDirectory()) {
      return;
    }
  } catch (err) {
    console.error(`Ran into issue when checking lstat for ${licenseFile}`, err);
    process.exit(0);
  }
  const filNameShort = filName.split(".")[0];
  const licensesText = fs.readFileSync(licenseFile, "utf-8");
  const lines = licensesText.match(/[^\r\n]+/g);

  let inLic = false;
  let numStartSeen = 0;
  let acc = [];
  let name = null;
  let version = null;

  lines.forEach((line, i) => {
    if (line === START) {
      if (!inLic) {
        inLic = true;
      } else if (inLic && numStartSeen === 0) {
        numStartSeen += 1;

        const pkgId = acc[acc.length - 1];
        const splitIndex = pkgId.lastIndexOf("@");
        name = pkgId.slice(0, splitIndex);
        version = pkgId.slice(splitIndex + 1);
      }
    }

    acc.push(line);

    if (
      i + 1 === lines.length ||
      (inLic && numStartSeen > 0 && lines[i + 1] === START)
    ) {
      const text = acc.slice(3).join("\n");
      name = name ? name : filNameShort;
      licenses.addLicense(name, version, text);

      inLic = false;
      numStartSeen = 0;
      name = null;
      version = null;
      acc = [];
    }
  });
}
